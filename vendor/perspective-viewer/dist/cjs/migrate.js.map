{
  "version": 3,
  "sources": ["../../src/ts/migrate.ts"],
  "sourcesContent": ["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\n/**\n * A migration utility for `@finos/perspective-viewer` and\n * `@finos/perspective-workspace` persisted state objects.  If you have an\n * application which persists tokens returned by the `.save()` method of a\n * Perspective Custom Element, and you want to upgrade Perspective to the latest\n * version, this module is for you!  You know who you are!\n *\n * Say you have a `<perspective-viewer>` Custom Element from\n * `@finos/perspective-viewer>=0.8.3`, and have persisted an arbitrary persistence\n * token object:\n *\n * ```javascript\n * const old_elem = document.querySelector(\"perspective-viewer\");\n * const old_token = await old_elem.save();\n * ```\n *\n * To migrate this token to the version of `@finos/perspective-migrate` itself:\n *\n * ```javascript\n * import {convert} from \"@finos/perspective-viewer`;\n *\n * // ...\n *\n * const new_elem = document.querySelector(\"perspective-viewer\");\n * const new_token = convert(old_token);\n * await new_elem.restore(new_token);\n * ```\n *\n * `convert` can also be imported in node for converting persisted tokens\n * outside the browser.\n *\n * ```javascript\n * const {convert} = require(\"@finos/perspective-viewer/dist/cjs/migrate.js\");\n * ```\n * @param old the layout to convert, in `<perspective-viewer>` or\n * `<perspective-workspace>` format.\n * @param options a `PerspectiveConvertOptions` object specifying the convert\n * options for this call.\n * @returns a layout for either `<perspective-viewer>` or\n * `<perspective-workspace>`, updated to the perspective version of this\n * script's package.\n */\nexport function convert(\n    old: Record<string, unknown> | ArrayBuffer | string,\n    { warn = true, replace_defaults = false }: PerspectiveConvertOptions = {}\n): Record<string, unknown> | ArrayBuffer | string {\n    if (typeof old === \"object\" && !(old instanceof ArrayBuffer)) {\n        const copy = JSON.parse(JSON.stringify(old));\n        if (\"viewers\" in copy && \"detail\" in copy) {\n            return migrate_workspace(copy, { warn, replace_defaults });\n        } else {\n            return migrate_viewer(copy, false, { warn, replace_defaults });\n        }\n    } else {\n        return old;\n    }\n}\n\ntype PerspectiveConvertOptions = {\n    warn?: boolean;\n    replace_defaults?: boolean;\n};\n\n/**\n * Migrate a layout for `<perspective-workspace>`\n * @param old\n * @param options\n * @returns\n */\nfunction migrate_workspace(old, options) {\n    for (const key in old.viewers) {\n        old.viewers[key] = migrate_viewer(old.viewers[key], true, options);\n        if (!(\"master\" in old.viewers[key])) {\n            old.viewers[key].master = false;\n            if (options.warn) {\n                console.warn(\n                    `Deprecated perspective missing attribute \"master\" set to default`\n                );\n            }\n        }\n\n        if (!(\"linked\" in old.viewers[key])) {\n            old.viewers[key].linked = false;\n            if (options.warn) {\n                console.warn(\n                    `Deprecated perspective missing attribute \"linked\" set to default`\n                );\n            }\n        }\n    }\n\n    return old;\n}\n\n/**\n * Migrate a layout for `<perspective-viewer>`\n * @param old\n * @param options\n * @returns\n */\nfunction migrate_viewer(old, omit_attributes, options) {\n    return chain(\n        old,\n        [\n            migrate_group_by,\n            migrate_split_by,\n            migrate_filters,\n            migrate_expressions,\n            options.replace_defaults ? migrate_nulls : false,\n            migrate_plugins,\n            migrate_plugin_config,\n            migrate_title,\n            migrate_name_title_workspace,\n            omit_attributes\n                ? migrate_attributes_workspace\n                : migrate_attributes_viewer,\n        ].filter((x) => !!x),\n        options\n    );\n}\n\n/**\n * Chains functions of `args` and apply to `old`\n * @param old\n * @param args\n * @param options\n * @returns\n */\nfunction chain(old, args, options) {\n    for (const arg of args) {\n        old = arg(old, options);\n    }\n\n    return old;\n}\n\n/**\n * Replace `null` properties with defaults.  This is not strictly behavioral,\n * as new `<perspective-viewer>` treats `null` as an explicit \"reset to default\"\n * instruction.  However, it may be necessary to ensure that `.save()` returns\n * identical results to `convert()`, which may be desirable when migrating a\n * database of layouts.\n * @param old\n * @param options\n * @returns\n */\nfunction migrate_nulls(old, options) {\n    for (const key of [\"group_by\", \"split_by\", \"filter\", \"sort\"]) {\n        if (old[key] === null) {\n            old[key] = [];\n            if (options.warn) {\n                console.warn(\n                    `Deprecated perspective missing attribute \"${key}\" set to default\"`\n                );\n            }\n        }\n\n        if (\"aggregates\" in old && old.aggregates === null) {\n            old.aggregates = {};\n            if (options.warn) {\n                console.warn(\n                    `Deprecated perspective missing attribute \"aggregates\" set to default\"`\n                );\n            }\n        }\n    }\n\n    return old;\n}\n\n/**\n * Helper for alias-replacement migrations\n * @param original\n * @param aliases\n * @returns\n */\nfunction _migrate_field_aliases(original, aliases) {\n    return function (old, options) {\n        let count = 0;\n        for (const pivot of aliases) {\n            if (pivot in old) {\n                if (count++ > 0) {\n                    throw new Error(`Duplicate \"${original}\" fields`);\n                }\n\n                old[original] = old[pivot];\n                if (pivot !== original) {\n                    delete old[pivot];\n                    if (options.warn) {\n                        console.warn(\n                            `Deprecated perspective attribute \"${pivot}\" renamed \"${original}\"`\n                        );\n                    }\n                }\n            }\n        }\n\n        return old;\n    };\n}\n\n/**\n * Migrate `group_by` field aliases\n */\nconst migrate_group_by = _migrate_field_aliases(\"group_by\", [\n    \"group_by\",\n    \"row_pivots\",\n    \"row-pivot\",\n    \"row-pivots\",\n    \"row_pivot\",\n]);\n\n/**\n * Migrate `split_by` field aliases\n */\nconst migrate_split_by = _migrate_field_aliases(\"split_by\", [\n    \"split_by\",\n    \"column_pivots\",\n    \"column-pivot\",\n    \"column-pivots\",\n    \"column_pivot\",\n    \"col_pivots\",\n    \"col-pivot\",\n    \"col-pivots\",\n    \"col_pivot\",\n]);\n\n/**\n * Migrate `filters` field aliases\n */\nconst migrate_filters = _migrate_field_aliases(\"filter\", [\"filter\", \"filters\"]);\n\n/**\n * Migrate the old `computed-columns` format expressions to ExprTK\n * @param regex1\n * @param rep\n * @param expression\n * @param old\n * @param options\n * @returns\n */\nfunction _migrate_expression(regex1, rep, expression, old, options) {\n    if (regex1.test(expression)) {\n        const replaced = expression.replace(regex1, rep);\n        if (options.warn) {\n            console.warn(\n                `Deprecated perspective \"expression\" attribute value \"${expression}\" updated to \"${replaced}\"`\n            );\n        }\n\n        for (const key of [\"group_by\", \"split_by\"]) {\n            if (key in old) {\n                for (const idx in old[key]) {\n                    const pivot = old[key][idx];\n                    if (pivot === expression.replace(/\"/g, \"\")) {\n                        old[key][idx] = replaced;\n                        if (options.warn) {\n                            console.warn(\n                                `Deprecated perspective expression in \"${key}\" attribute \"${expression}\" replaced with \"${replaced}\"`\n                            );\n                        }\n                    }\n                }\n            }\n        }\n\n        for (const filter of old.filter || []) {\n            if (filter[0] === expression.replace(/\"/g, \"\")) {\n                filter[0] = replaced;\n                if (options.warn) {\n                    console.warn(\n                        `Deprecated perspective expression in \"filter\" attribute \"${expression}\" replaced with \"${replaced}\"`\n                    );\n                }\n            }\n        }\n\n        for (const sort of old.sort || []) {\n            if (sort[0] === expression.replace(/\"/g, \"\")) {\n                sort[0] = replaced;\n                if (options.warn) {\n                    console.warn(\n                        `Deprecated perspective expression in \"sort\" attribute \"${expression}\" replaced with \"${replaced}\"`\n                    );\n                }\n            }\n        }\n\n        return replaced;\n    } else {\n        return expression;\n    }\n}\n\nfunction migrate_title(old) {\n    if (old[\"title\"] === undefined) {\n        old.title = null;\n    }\n\n    return old;\n}\n\n/**\n * Migrate `expressions` field from `computed-columns`\n * @param old\n * @param options\n * @returns\n */\nfunction migrate_expressions(old, options) {\n    if (old[\"computed-columns\"]) {\n        if (\"expressions\" in old) {\n            throw new Error(`Duplicate \"expressions\" and \"computed-columns`);\n        }\n\n        old.expressions = old[\"computed-columns\"];\n        delete old[\"computed-columns\"];\n        if (options.warn) {\n            console.warn(\n                `Deprecated perspective attribute \"computed-columns\" renamed \"expressions\"`\n            );\n        }\n\n        const REPLACEMENTS = [\n            [/^year_bucket\\(\"(.+?)\"\\)/, `bucket(\"$1\", 'y')`],\n            [/^month_bucket\\(\"(.+?)\"\\)/, `bucket(\"$1\", 'M')`],\n            [/^day_bucket\\(\"(.+?)\"\\)/, `bucket(\"$1\", 'd')`],\n            [/^hour_bucket\\(\"(.+?)\"\\)/, `bucket(\"$1\", 'h')`],\n            [/^minute_bucket\\(\"(.+?)\"\\)/, `bucket(\"$1\", 'm')`],\n            [/^second_bucket\\(\"(.+?)\"\\)/, `bucket(\"$1\", 's')`],\n        ];\n\n        for (const idx in old.expressions) {\n            let expression = old.expressions[idx];\n            for (const [a, b] of REPLACEMENTS) {\n                expression = _migrate_expression(\n                    a,\n                    b,\n                    expression,\n                    old,\n                    options\n                );\n            }\n\n            old.expressions[idx] = expression;\n        }\n    }\n\n    return old;\n}\n\n/**\n * Migrate the `plugin` field\n * @param old\n * @param options\n * @returns\n */\nfunction migrate_plugins(old, options) {\n    const ALIASES = {\n        datagrid: \"Datagrid\",\n        Datagrid: \"Datagrid\",\n        d3_y_area: \"Y Area\",\n        \"Y Area\": \"Y Area\",\n        d3_y_line: \"Y Line\",\n        \"Y Line\": \"Y Line\",\n        d3_xy_line: \"X/Y Line\",\n        \"X/Y Line\": \"X/Y Line\",\n        d3_y_scatter: \"Y Scatter\",\n        \"Y Scatter\": \"Y Scatter\",\n        d3_xy_scatter: \"X/Y Scatter\",\n        \"X/Y Scatter\": \"X/Y Scatter\",\n        d3_x_bar: \"X Bar\",\n        \"X Bar\": \"X Bar\",\n        d3_y_bar: \"Y Bar\",\n        \"Y Bar\": \"Y Bar\",\n        d3_heatmap: \"Heatmap\",\n        Heatmap: \"Heatmap\",\n        d3_treemap: \"Treemap\",\n        Treemap: \"Treemap\",\n        d3_sunburst: \"Sunburst\",\n        Sunburst: \"Sunburst\",\n    };\n\n    if (\"plugin\" in old && old.plugin !== ALIASES[old.plugin]) {\n        old.plugin = ALIASES[old.plugin];\n        if (options.warn) {\n            console.warn(\n                `Deprecated perspective \"plugin\" attribute value \"${\n                    old.plugin\n                }\" updated to \"${ALIASES[old.plugin]}\"`\n            );\n        }\n    }\n\n    return old;\n}\n\n/**\n * Migrate the `plugin_config` field\n * @param old\n * @param options\n * @returns\n */\nfunction migrate_plugin_config(old, options) {\n    if (old.plugin === \"Datagrid\" && !!old.plugin_config) {\n        if (!old.plugin_config.columns) {\n            if (options.warn) {\n                console.warn(\n                    `Deprecated perspective attribute \"plugin_config\" moved to \"plugin_config.columns\"`\n                );\n            }\n\n            const columns = {};\n            for (const name of Object.keys(old.plugin_config)) {\n                const column = old.plugin_config[name];\n                delete old.plugin_config[name];\n\n                if (typeof column.color_mode === \"string\") {\n                    if (column.color_mode === \"foreground\") {\n                        column.number_fg_mode = \"color\";\n                    } else if (column.color_mode === \"bar\") {\n                        column.number_fg_mode = \"bar\";\n                    } else if (column.color_mode === \"background\") {\n                        column.number_bg_mode = \"color\";\n                    } else if (column.color_mode === \"gradient\") {\n                        column.number_bg_mode = \"gradient\";\n                    } else {\n                        console.warn(`Unknown color_mode ${column.color_mode}`);\n                    }\n\n                    // column.number_color_mode = column.color_mode;\n                    delete column[\"color_mode\"];\n\n                    if (options.warn) {\n                        console.warn(\n                            `Deprecated perspective attribute \"color_mode\" renamed \"number_bg_mode\"`\n                        );\n                    }\n                }\n\n                columns[name] = column;\n            }\n\n            old.plugin_config.columns = columns;\n            if (options.replace_defaults) {\n                old.plugin_config.editable = false;\n                old.plugin_config.scroll_lock = true;\n            }\n        }\n\n        // Post 1.5, number columns have been split between `fg` and `bg`\n        // style param contexts.\n        for (const name of Object.keys(old.plugin_config.columns)) {\n            const column = old.plugin_config.columns[name];\n\n            if (typeof column.number_color_mode === \"string\") {\n                if (column.number_color_mode === \"foreground\") {\n                    column.number_fg_mode = \"color\";\n                } else if (column.number_color_mode === \"bar\") {\n                    column.number_fg_mode = \"bar\";\n                } else if (column.number_color_mode === \"background\") {\n                    column.number_bg_mode = \"color\";\n                } else if (column.number_color_mode === \"gradient\") {\n                    column.number_bg_mode = \"gradient\";\n                }\n\n                delete column[\"number_color_mode\"];\n\n                if (options.warn) {\n                    console.warn(\n                        `Deprecated perspective attribute \"number_color_mode\" renamed \"number_bg_mode\"`\n                    );\n                }\n            }\n\n            if (column.gradient !== undefined) {\n                if (column.number_bg_mode === \"gradient\") {\n                    column.bg_gradient = column.gradient;\n                } else if (column.number_fg_mode === \"bar\") {\n                    column.fg_gradient = column.gradient;\n                }\n\n                delete column[\"gradient\"];\n                if (options.warn) {\n                    console.warn(\n                        `Deprecated perspective attribute \"gradient\" renamed \"bg_gradient\"`\n                    );\n                }\n            }\n\n            if (column.pos_color !== undefined) {\n                if (column.number_bg_mode !== undefined) {\n                    column.pos_bg_color = column.pos_color;\n                } else if (column.number_fg_mode !== undefined) {\n                    column.pos_fg_color = column.pos_color;\n                }\n\n                delete column[\"pos_color\"];\n                if (options.warn) {\n                    console.warn(\n                        `Deprecated perspective attribute \"pos_color\" renamed \"pos_bg_color\"`\n                    );\n                }\n            }\n\n            if (column.neg_color !== undefined) {\n                if (column.number_bg_mode !== undefined) {\n                    column.neg_bg_color = column.neg_color;\n                } else if (column.number_fg_mode !== undefined) {\n                    column.neg_fg_color = column.neg_color;\n                }\n\n                delete column[\"neg_color\"];\n                if (options.warn) {\n                    console.warn(\n                        `Deprecated perspective attribute \"neg_color\" renamed \"neg_bg_color\"`\n                    );\n                }\n            }\n        }\n    }\n\n    return old;\n}\n\n/**\n * Migrate attributes which were once persisted but are now considered errors\n * in `<perspective-viewer>` and should only be set in HTML\n * @param old\n * @param options\n * @returns\n */\nfunction migrate_attributes_viewer(old, options) {\n    const ATTRIBUTES = [\n        \"editable\",\n        \"selectable\",\n        \"name\",\n        \"table\",\n        \"master\",\n        \"linked\",\n    ];\n    for (const attr of ATTRIBUTES) {\n        if (attr in old) {\n            delete old[attr];\n\n            if (options.warn) {\n                console.warn(\n                    `Deprecated perspective attribute \"${attr}\" removed`\n                );\n            }\n        }\n    }\n\n    return old;\n}\n\n/**\n * Migrate attributes which were once persisted but are now considered errors\n * in `<perspective-workspace>` and should only be set in HTML\n * @param old\n * @param options\n * @returns\n */\nfunction migrate_attributes_workspace(old, options) {\n    const ATTRIBUTES = [\n        \"editable\",\n        \"selectable\",\n        \"name\",\n        \"table\",\n        \"master\",\n        \"linked\",\n    ];\n    for (const attr of ATTRIBUTES) {\n        if (attr in old && old[attr] === null) {\n            delete old[attr];\n\n            if (options.warn) {\n                console.warn(\n                    `Deprecated perspective attribute \"${attr}\" removed`\n                );\n            }\n        }\n    }\n\n    return old;\n}\n\n/**\n * Migrate workspace viewer 'name' which was unified with `title`.\n * @param old\n * @param options\n * @returns\n */\nfunction migrate_name_title_workspace(old, options) {\n    if (\"name\" in old) {\n        if (\"title\" in old && old.title !== undefined) {\n            old.title = old[\"name\"];\n            if (options.warn) {\n                console.warn(`\"name\" conflicts with \"title\"`);\n            }\n        }\n\n        delete old[\"name\"];\n\n        if (options.warn) {\n            console.warn(`\"name\" unified with \"title\"`);\n        }\n    }\n\n    return old;\n}\n"],
  "mappings": "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",
  "names": []
}
